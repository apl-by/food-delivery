import Head from "next/head";
import { ReactElement, useCallback, useEffect, useMemo, useState } from "react";
import Layout from "../components/_layouts/layout/layout";
import type { NextPageWithLayout } from "./_app";
import Promo from "../components/_home-page/promo/promo";
import styles from "../styles/home.module.scss";
import FoodCategory from "../components/_home-page/food-category/food-category";
import { categories, restaurants } from "../data/data";
import { useRouter } from "next/router";
import RestaurantCard from "@/components/_home-page/restaurant-card/restaurant-card";
import { getData, RestaurantRes } from "@/utils/utils";
import { GetServerSideProps } from "next";
import classNames from "classnames/bind";
import { useAppState } from "@/hooks/useAppState";

let cx = classNames.bind(styles);

const queryName = "filter";
export interface DataToDisplay extends RestaurantRes {
  ordersCount: number;
}

export const getServerSideProps: GetServerSideProps<{}> = async (context) => {
  const { query } = context;

  const data = getData(restaurants, query);

  return {
    props: {
      data,
      query,
    },
  };
};

type HomeProps = {
  data: RestaurantRes[];
  query: Partial<{
    [key: string]: string | string[];
  }>;
};

const Home: NextPageWithLayout<HomeProps> = ({ data, query }) => {
  const { push, asPath, pathname } = useRouter();
  const { state } = useAppState();
  const list = state.order.list;
  const [dataToDisplay, setDataToDIsplay] = useState<DataToDisplay[]>([]);

  useEffect(() => {
    if (data.length === 0) return;
    const handledData: DataToDisplay[] = data.map((i) => {
      const newData = JSON.parse(JSON.stringify(i));
      newData.ordersCount = 0;
      list.forEach((order) =>
        order.restaurant === i.title
          ? (newData.ordersCount += order.count)
          : void 0
      );
      return newData;
    });

    setDataToDIsplay(handledData);
  }, [data, list]);

  const handleFilter = useCallback(
    (value: string) => {
      let queryString = asPath.replace(pathname, "");
      const queryValue = `${queryName}=${value}`;
      const queryRegExp = new RegExp(`&?${queryValue}`);

      if (queryString.includes(queryValue)) {
        queryString = queryString.replace(queryRegExp, "");
      } else {
        queryString = queryString + `&` + queryValue;
      }
      const newPath = queryString.startsWith("?")
        ? pathname + queryString
        : pathname + "?" + queryString;

      push(newPath, undefined, { scroll: false });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [asPath, pathname]
  );

  const JsxDataList = useMemo(() => {
    if (data.length === 0) {
      return <p>{"Sorry, nothing was found for your query"}</p>;
    }

    const cnRestaurantsWrapper = cx("restaurants-wrapper");
    return (
      <div className={cnRestaurantsWrapper}>
        {dataToDisplay.map((i) => (
          <RestaurantCard key={i.id} data={i} />
        ))}
      </div>
    );
  }, [data, dataToDisplay]);

  const setFoodCategoryState = useCallback(
    (title: string) => {
      const value = query[queryName];
      return typeof value === "string"
        ? title === value
        : typeof value === "object"
        ? value.includes(title)
        : false;
    },
    [query]
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <section className={styles.promo}>
          <Promo
            img={"/promo-deserts.png"}
            alt={"Desserts"}
            mod={"primary"}
            title={"All deserts"}
            info={"20% OFF"}
            category={"Desserts"}
          />
          <Promo
            img={"/promo-burgers.png"}
            alt={"Burgers"}
            mod={"secondary"}
            title={"Big Burgers"}
            info={"50% OFF"}
            category={"Fooddies"}
          />
        </section>
        <section className={styles.categories}>
          {categories.map((i) => (
            <FoodCategory
              key={i.id}
              icon={i.icon}
              title={i.title}
              checked={setFoodCategoryState(i.title)}
              onClick={handleFilter}
            />
          ))}
        </section>

        <section className={styles.restaurants}>
          <h2 className={styles["restaurants-subtitle"]}>
            {"Nearby restaurants"}
          </h2>
          {JsxDataList}
        </section>
      </main>
    </>
  );
};

Home.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Home;
