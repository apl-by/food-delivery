import Head from "next/head";
import { ReactElement, useState } from "react";
import type { NextPageWithLayout } from "../_app";
import AccountForm, {
  AccountInputValues,
  ChangedKeys,
} from "@/components/_account-page/account-form/account-form";
import AccountLayout from "@/components/_layouts/account-layout/account-layout";
import { useAuth } from "@/hooks/use-auth";
import { useAppState } from "@/hooks/use-app-state";
import { ADD_MODAL_INFO, DELETE_EXAMPLE_MOD } from "@/services/actions/actions";
import { exampleModUser } from "@/data/data";

const Account: NextPageWithLayout = () => {
  const [isRequest, setIsRequest] = useState(false);

  const { user, updData, updEmailWithData, logOut } = useAuth();
  const { state, dispatch } = useAppState();
  const exampleMod = state.exampleMod;

  const sourceUserData = exampleMod ? exampleModUser : user;

  const handleAccountSubmit = async (
    formData: AccountInputValues,
    keys: ChangedKeys
  ) => {
    if (exampleMod) {
      return dispatch({
        type: ADD_MODAL_INFO,
        payload: {
          modalType: "notification",
          info: {
            message:
              "You can't save changes in the example mod. You need to sign up and to sign in as a user to change the data",
          },
        },
      });
    }

    if (isRequest || keys.length === 0) return;
    if (!keys.includes("email")) {
      setIsRequest(true);
      return updData(formData)
        .catch((error) =>
          dispatch({
            type: ADD_MODAL_INFO,
            payload: { modalType: "error", info: error },
          })
        )
        .finally(() => setIsRequest(false));
    }
    if (keys.includes("email")) {
      setIsRequest(true);
      return updEmailWithData(formData)
        .catch((error) => {
          if (error.message === "Needs reSignIn") {
            return dispatch({
              type: ADD_MODAL_INFO,
              payload: {
                modalType: "reSignIn",
                forInvoke: { actionName: "updEmailWithData", data: formData },
              },
            });
          }
          dispatch({
            type: ADD_MODAL_INFO,
            payload: { modalType: "error", info: error },
          });
        })
        .finally(() => setIsRequest(false));
    }
  };

  const handleSignOut = () => {
    if (exampleMod) {
      return dispatch({
        type: DELETE_EXAMPLE_MOD,
      });
    }

    if (isRequest) return;
    setIsRequest(true);
    logOut()
      .catch((error: any) =>
        dispatch({
          type: ADD_MODAL_INFO,
          payload: { modalType: "error", info: error },
        })
      )
      .finally(() => setIsRequest(false));
  };

  const handleRemoveUser = (email: string) => {
    if (exampleMod) {
      return dispatch({
        type: ADD_MODAL_INFO,
        payload: {
          modalType: "notification",
          info: {
            message:
              "You can't remove user in the example mod. You need to sign up and to sign in as a user to change the data",
          },
        },
      });
    }

    dispatch({
      type: ADD_MODAL_INFO,
      payload: {
        modalType: "remove",
        forInvoke: { actionName: "removeUser", email },
      },
    });
  };

  if (!sourceUserData) return null;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AccountForm
        onSubmit={handleAccountSubmit}
        onSignOut={handleSignOut}
        onRemoveUser={handleRemoveUser}
        user={sourceUserData}
      />
    </>
  );
};

Account.getLayout = function getLayout(page: ReactElement) {
  return <AccountLayout>{page}</AccountLayout>;
};

export default Account;
